
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.crypto.spec.SecretKeySpec;

import ij.IJ;
import ij.ImagePlus;
import ij.plugin.ContrastEnhancer;
import ij.plugin.filter.Convolver;
import ij.process.ImageConverter;
import ij.process.ImageProcessor;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.jce.ECNamedCurveTable;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author CMP
 */
public class DImage1 extends javax.swing.JFrame {

    String id, pname, iname, txt, encryptedAlicePublicKeyString, sta;
    String a, pu;

    PrivateKey privateKey;
    String dpubkey, dprikey, curve, encodedPublicKey, encodedPrivateKey;
    PublicKey publicKey;
    SecretKeySpec secretKey;
    String encodedkey;
    byte[] sharedSecretBob;
    KeyPair bobKeyPair;

    /**
     * Creates new form DImage1
     */
    public DImage1() {
        initComponents();
//        a1.setVisible(false);
//        a2.setVisible(false);
//        a3.setVisible(false);
//        a4.setVisible(false);
//        a5.setVisible(false);
//        a11.setVisible(false);
//        a12.setVisible(false);
//        sug.setVisible(false);
//        a6.setVisible(false);
//         a8.setVisible(false);
        Security.addProvider(new BouncyCastleProvider());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        patient = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        img = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        msg = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        a6 = new javax.swing.JButton();
        a5 = new javax.swing.JButton();
        a4 = new javax.swing.JTextField();
        a3 = new javax.swing.JButton();
        a1 = new javax.swing.JButton();
        a2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        a11 = new javax.swing.JLabel();
        sug = new javax.swing.JTextField();
        a12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Patient Records");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTable4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Username", "Cloud_ID", "Request_File"
            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(80, 80, 80)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jButton8)
                    .addGap(25, 25, 25)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 410, 300));

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));

        patient.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Patient Name");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("File Name");

        img.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        img.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Message");

        msg.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        msg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText(" Status");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(patient, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(patient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 310, 310));

        jPanel4.setBackground(new java.awt.Color(0, 102, 153));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        a6.setBackground(new java.awt.Color(0, 0, 0));
        a6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a6.setForeground(new java.awt.Color(255, 255, 255));
        a6.setText("Enhance");
        a6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a6ActionPerformed(evt);
            }
        });
        jPanel4.add(a6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 139, 175, -1));

        a5.setBackground(new java.awt.Color(0, 0, 0));
        a5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a5.setForeground(new java.awt.Color(255, 255, 255));
        a5.setText("Decrypt");
        a5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a5ActionPerformed(evt);
            }
        });
        jPanel4.add(a5, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 139, 149, -1));

        a4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a4ActionPerformed(evt);
            }
        });
        jPanel4.add(a4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 103, 175, -1));

        a3.setBackground(new java.awt.Color(0, 0, 0));
        a3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a3.setForeground(new java.awt.Color(255, 255, 255));
        a3.setText("Generate Secret Key");
        a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a3ActionPerformed(evt);
            }
        });
        jPanel4.add(a3, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 102, -1, -1));

        a1.setBackground(new java.awt.Color(0, 0, 0));
        a1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a1.setForeground(new java.awt.Color(255, 255, 255));
        a1.setText("Receive Public Key");
        a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a1ActionPerformed(evt);
            }
        });
        jPanel4.add(a1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 149, -1));

        a2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a2ActionPerformed(evt);
            }
        });
        jPanel4.add(a2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 175, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, 410, 200));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 50, 87, -1));

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        a11.setBackground(new java.awt.Color(255, 255, 255));
        a11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        a11.setForeground(new java.awt.Color(255, 255, 255));
        a11.setText("Enter Suggestion");

        sug.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sugActionPerformed(evt);
            }
        });

        a12.setBackground(new java.awt.Color(0, 0, 0));
        a12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a12.setForeground(new java.awt.Color(255, 255, 255));
        a12.setText("Send");
        a12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(a12, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sug, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(a11)
                .addGap(18, 18, 18)
                .addComponent(sug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(a12)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 510, 300, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        try {
            Class.forName("com.mysql.jdbc.Driver");
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "")) {

                String sql = "SELECT id, patientname, imgname, msg,status FROM patient where did='" + DLogin.uid2 + "'";
                PreparedStatement ps = con.prepareStatement(sql);
                ResultSet rs = ps.executeQuery();

                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("ID");
                model.addColumn("Patient Name");
                model.addColumn("Image Name");
                model.addColumn("Message");
                model.addColumn("Status");
                while (rs.next()) {
                    Object[] row = new Object[]{
                        rs.getInt("id"),
                        rs.getString("patientname"),
                        rs.getString("imgname"),
                        rs.getString("msg"),
                        rs.getString("status"),};
                    model.addRow(row);
                }

                jTable4.setModel(model);

            } catch (SQLException ex) {
                System.out.println(ex);
            }
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
        int row = jTable4.getSelectedRow();
        id = (jTable4.getModel().getValueAt(row, 0).toString());

        pname = (jTable4.getModel().getValueAt(row, 1).toString());
        iname = (jTable4.getModel().getValueAt(row, 2).toString());
        txt = (jTable4.getModel().getValueAt(row, 3).toString());
        sta = (jTable4.getModel().getValueAt(row, 4).toString());
        patient.setText(pname);
        img.setText(iname);
        msg.setText(txt);
    }//GEN-LAST:event_jTable4MouseClicked

    private void patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientActionPerformed

    private void imgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imgActionPerformed

    private void msgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msgActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        try {
            Class.forName("com.mysql.jdbc.Driver");
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "")) {

                String sql = "SELECT * FROM patient where id=?";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setString(1, id);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    a = rs.getString("status");

                }
                if (a.equals("Uploaded")) {
//                    a1.setVisible(true);
//                    a2.setVisible(true);
//                    a3.setVisible(true);
//                    a4.setVisible(true);
//                    a5.setVisible(true);
//                    a6.setVisible(true);
//                    a11.setVisible(true);
//                    a12.setVisible(true);
//                    sug.setVisible(true);
                    JOptionPane.showMessageDialog(this, "Patient record is uploaded!");

                } else {
                    JOptionPane.showMessageDialog(this, "Patient record is not uploaded");

                }
            } catch (SQLException ex) {
                System.out.println(ex);
            }
        } catch (ClassNotFoundException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void a6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a6ActionPerformed
     try {                                   
//        Desktop desktop = Desktop.getDesktop();
//        try {
//            ImagePlus image = IJ.openImage("./Download/Images/" + iname);
//
//           /* ImageProcessor processor = image.getProcessor();
//            ContrastEnhancer ce = new ContrastEnhancer();
//            ce.equalize(processor);
//           processor = processor.resize(250, 250);
//            ImagePlus processedImage = new ImagePlus(null, processor);
//            */
//
//
//            
//        ImageProcessor processor = image.getProcessor();
//
//        // Apply Laplacian filter for edge enhancement ( unsharp masking)
//        float[] laplacianKernel = {
//            0, -1, 0,
//            -1, 4, -1,
//            0, -1, 0
//        };
//        Convolver convolver = new Convolver();
//        convolver.setNormalize(true);
//        convolver.convolve(processor, laplacianKernel, 3, 3);
//
//        // Adjust pixel values for sharpening
//        for (int y = 0; y < processor.getHeight(); y++) {
//            for (int x = 0; x < processor.getWidth(); x++) {
//                int pixelValue = processor.getPixel(x, y);
//                int sharpenedValue = Math.min(255, Math.max(0, pixelValue * 2)); // Increase intensity for sharpening
//                processor.putPixel(x, y, sharpenedValue);
//            }
//        }
//        processor = processor.resize(250, 250);
//        ImagePlus processedImage = new ImagePlus(null, processor);
//
//           
//            File outputFile = new File("./Download/Images/Enhanced_" + iname);
//            ImageIO.write(processedImage.getBufferedImage(), "png", outputFile);
//            File dirToOpen = new File("./Download/Images/Enhanced_" + iname);
//            desktop.open(dirToOpen);
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this,"Only Image will be Enhanced!");
//           }

BufferedImage img = null;
File f  = new File(   ("./Download/Images/" + iname));
BufferedImage    simg = ImageIO.read(f);
// read image
try {
    
    img = ImageIO.read(f);
}
catch (IOException e) {
    System.out.println(e);
}

// Get image width and height
int width = img.getWidth();
int height = img.getHeight();

// Convert to negative
for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
        int p = img.getRGB(x, y);
        int a = (p >> 24) & 0xff;
        int r = (p >> 16) & 0xff;
        int g = (p >> 8) & 0xff;
        int b = p & 0xff;
        
        // subtract RGB from 255
        r = 255 - r;
        g = 255 - g;
        b = 255 - b;
        
        // set new RGB value
        p = (a << 24) | (r << 16) | (g << 8) | b;
        img.setRGB(x, y, p);
    }
}  

// write image
try {
    f = new File(  "./Download/Images/Negative_" + iname);
    ImageIO.write(img, "png", f);
}
catch (IOException e) {
    System.out.println(e);
}

int[] pixels = img.getRGB(0, 0, width, height, null, 0, width);

for (int i = 0; i < pixels.length; i++) {
    
    int p = pixels[i];
    
    int a = (p >> 24) & 0xff;
    int r = (p >> 16) & 0xff;
    int g = (p >> 8) & 0xff;
    int b = p & 0xff;
    
    int avg = (r + g + b) / 3;
    
    p = (a << 24) | (avg << 16) | (avg << 8) | avg;
    
    pixels[i] = p;
}
img.setRGB(0, 0, width, height, pixels, 0, width);

try {
    f = new File(
            "./Download/Images/Grayscaled_" + iname);
    ImageIO.write(img, "png", f);
} catch (IOException e) {
    System.out.println(e);
}

BufferedImage mimg = new BufferedImage(
        width, height, BufferedImage.TYPE_INT_ARGB);

for (int y = 0; y < height; y++) {
    for (int lx = 0, rx = width - 1; lx < width; lx++, rx--) {
        
        
        int p = simg.getRGB(lx, y);
        
        
        mimg.setRGB(rx, y, p);
    }
}

// save mirror image
try {
    f = new File(
           "./Download/Images/Mirrored_" + iname);
    ImageIO.write(mimg, "png", f);
}
catch (IOException e) {
    System.out.println("Error: " + e);
}
try {
            // Load the image
            BufferedImage originalImage = ImageIO.read(new File("./Download/Images/" + iname));
            BufferedImage segmentedImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB);

            // Set a threshold value for segmentation (adjust as needed)
            int threshold = 150;

            // Perform segmentation based on pixel intensity
            for (int x = 0; x < originalImage.getWidth(); x++) {
                for (int y = 0; y < originalImage.getHeight(); y++) {
                    Color color = new Color(originalImage.getRGB(x, y));
                    int grayscaleValue = (color.getRed() + color.getGreen() + color.getBlue()) / 3;

                    if (grayscaleValue < threshold) {
                        segmentedImage.setRGB(x, y, Color.BLACK.getRGB());
                    } else {
                        segmentedImage.setRGB(x, y, Color.WHITE.getRGB());
                    }
                }
            }

            // Save the segmented image
           ImageIO.write(segmentedImage, "png", new File("./Download/Images/Segmented_" + iname));

            System.out.println("Image segmentation completed and saved.");
        } catch (IOException e) {
            System.err.println("Error loading or saving the image: " + e.getMessage());
        }
 Desktop desktop = Desktop.getDesktop();
                 File dirToOpen = new File( "./Download/Images/Negative_" + iname);
            desktop.open(dirToOpen);
             File dirToOpen1 = new File( "./Download/Images/Grayscaled_" + iname);
            desktop.open(dirToOpen1);
             File dirToOpen2 = new File( "./Download/Images/Mirrored_" + iname);
            desktop.open(dirToOpen2);
             File dirToOpen3 = new File( "./Download/Images/Segmented_" + iname);
            desktop.open(dirToOpen3);
     } 
        catch (IOException ex) { 
            Logger.getLogger(DImage1.class.getName()).log(Level.SEVERE, null,ex); 
        } 
    }//GEN-LAST:event_a6ActionPerformed

    private void a5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a5ActionPerformed

        try {

            decryptImage("C:\\Users\\dines\\Box\\" + iname, sharedSecretBob, "./Download/Images/" + iname);

            JOptionPane.showMessageDialog(this, "Record is downloaded and decrypted!");
            Desktop desktop = Desktop.getDesktop();
            File dirToOpen = null;
            try {
                dirToOpen = new File("./Download/Images/" + iname);
                desktop.open(dirToOpen);
            } catch (IllegalArgumentException iae) {
                System.out.println("File Not Found");
            } catch (IOException ex) {

            }
        } catch (Exception ex) {

            System.out.println(ex);
        }
    }//GEN-LAST:event_a5ActionPerformed

    private void a4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a4ActionPerformed

    private void a3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a3ActionPerformed

        try {
            // TODO add your handling code here:

            byte[] decodedPrivateKeyBytes = Base64.getDecoder().decode(pu);
            // Create a private key object from the decoded bytes
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(decodedPrivateKeyBytes);
            PrivateKey decodedPrivateKey = KeyFactory.getInstance("ECDH").generatePrivate(privateKeySpec);

            KeyAgreement bobKeyAgreement = KeyAgreement.getInstance("ECDH");
            bobKeyAgreement.init(decodedPrivateKey); // private key (b)
            bobKeyAgreement.doPhase(publicKey, true); //   (b * G) * a
            sharedSecretBob = bobKeyAgreement.generateSecret(); //  shared secret (sharedECCKey)

            String sharedSecretBobHex = bytesToHex(sharedSecretBob);

            System.out.println("Bob's Shared Secret (256-bit key format): " + sharedSecretBobHex);

            JOptionPane.showMessageDialog(this, "Secret Key is generated!");

            a4.setText(sharedSecretBobHex.toString());

        } catch (Exception ex) {
            Logger.getLogger(Image.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_a3ActionPerformed
    public static SecretKey decodeStringToKey(String encodedKey) {
        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
        return new javax.crypto.spec.SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
    }

    public static byte[] decryptWithAES(byte[] encryptedData, SecretKey key) throws Exception {
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.DECRYPT_MODE, key);
        return aesCipher.doFinal(encryptedData);
    }

    private void a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a1ActionPerformed
        // TODO add your handling code here:
      
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");

            String sql = "SELECT * FROM patient where id=?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                encryptedAlicePublicKeyString = rs.getString(6);
                pu = rs.getString(11);
                encodedkey = rs.getString(8);
            }
            
        } catch (Exception ex) {
            System.out.println(ex);

        }  try {
            SecretKey decodedKey = decodeStringToKey(encodedkey);
            byte[] decryptedAlicePublicKeyBytes = decryptWithAES(Base64.getDecoder().decode(encryptedAlicePublicKeyString), decodedKey);
            X509EncodedKeySpec alicePublicKeySpec = new X509EncodedKeySpec(decryptedAlicePublicKeyBytes);
            publicKey = KeyFactory.getInstance("EC").generatePublic(alicePublicKeySpec);

            ECPoint alicePublicPoint = ((ECPublicKey) publicKey).getW();
            a2.setText(alicePublicPoint.getAffineX() + ", " + alicePublicPoint.getAffineY());

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_a1ActionPerformed

    private void a2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_a2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new Doctor().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void sugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sugActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sugActionPerformed

    private void a12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a12ActionPerformed
        // TODO add your handling code here:

        try {
            // TODO add your handling code here:

            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");
            java.sql.Statement stmt = con.createStatement();
            ResultSet rs;
            System.out.println(sug);
            String sql = "UPDATE patient SET suggestion = '" + sug.getText() + "',status = '" + "Downloaded" + "'  WHERE id = '" + id + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "Response is sended!");

        } catch (SQLException ex) {

            System.out.println(ex);
        }
    }//GEN-LAST:event_a12ActionPerformed
    public static void decryptImage(String encryptedImagePath, byte[] sharedSecret, String decryptedImagePath) {
        try {
            byte[] encryptedData = Files.readAllBytes(Paths.get(encryptedImagePath));

            byte[] validKey = new byte[256 / 8];

            if (sharedSecret.length >= validKey.length) {
                System.arraycopy(sharedSecret, 0, validKey, 0, validKey.length);
            } else {
                System.arraycopy(sharedSecret, 0, validKey, 0, sharedSecret.length);
            }

            SecretKeySpec aesKey = new SecretKeySpec(validKey, "AES");

            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, aesKey);

            byte[] decryptedData = cipher.doFinal(encryptedData);

            FileOutputStream fos = new FileOutputStream(decryptedImagePath);
            fos.write(decryptedData);
            fos.close();

            JOptionPane.showMessageDialog(null, "Record is downloaded and decrypted!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder(2 * bytes.length);
        for (byte b : bytes) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DImage1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DImage1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DImage1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DImage1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DImage1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton a1;
    private javax.swing.JLabel a11;
    private javax.swing.JButton a12;
    private javax.swing.JTextField a2;
    private javax.swing.JButton a3;
    private javax.swing.JTextField a4;
    private javax.swing.JButton a5;
    private javax.swing.JButton a6;
    private javax.swing.JTextField img;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField msg;
    private javax.swing.JTextField patient;
    private javax.swing.JTextField sug;
    // End of variables declaration//GEN-END:variables
}

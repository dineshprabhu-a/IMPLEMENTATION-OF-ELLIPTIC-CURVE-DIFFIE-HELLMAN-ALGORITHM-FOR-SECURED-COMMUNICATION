import javax.crypto.KeyAgreement;
import java.io.*;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.*;
import java.util.Arrays;
import java.util.Scanner;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author CMP
 */
public class Image extends javax.swing.JFrame {

    PublicKey publicKey;
    PrivateKey privateKey;
    KeyPair aliceKeyPair;
    SecretKeySpec secretKey;
    /**
     * Creates new form Image
     */
    public static String filepath, curve,filename, encodedPrivateKey, encodedPublicKey, dpub; PublicKey bobPublicKey ;
    int maxOfid; 
byte[] sharedSecretAlice;String encryptedAlicePublicKeyString; String encodedKey; SecretKey sharedAESKey ;
    public Image() {
       
//        setExtendedState(JFrame.MAXIMIZED_BOTH);
//        setUndecorated(true);
  


        initComponents();   
       try{ 
        Class.forName("com.mysql.jdbc.Driver");
          
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");
           
            Statement stmt = (Statement) con.createStatement();
            Statement stmt1 = (Statement) con.createStatement();
        Security.addProvider(new BouncyCastleProvider());
        
        
        try {
    System.out.println("selectfile");
   ResultSet rs = stmt.executeQuery("SELECT id, name, specialist FROM doctor");
    
    while (rs.next()) {
        int id = rs.getInt("id");
        String username = rs.getString("name");
        String specialist = rs.getString("specialist");
        
        String doctorInfo = id + " - " + username + " (" + specialist + ")";
        
        System.out.println(doctorInfo);
        
        jComboBox1.addItem(doctorInfo);
    }
    
        }
        catch(Exception e){
            System.out.println(e);
        }
  
    
} catch (Exception e) {
    e.printStackTrace();
}

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        file = new javax.swing.JRadioButton();
        img = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        inp = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pri = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        pub = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        msg = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        skey = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        newk = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 153, 204));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Choose Image");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Choose File");

        file.setForeground(new java.awt.Color(255, 255, 255));
        file.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileMouseClicked(evt);
            }
        });

        img.setForeground(new java.awt.Color(255, 255, 255));
        img.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(file))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(img))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Select Doctor ");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 370, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter Secret  parameter");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 190, 40));

        inp.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        inp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpActionPerformed(evt);
            }
        });
        jPanel3.add(inp, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 150, 170, 30));

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Generate ECC Keypair");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 170, 30));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Private Key");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, -1, -1));

        pri.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priActionPerformed(evt);
            }
        });
        jPanel3.add(pri, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 170, 30));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Public Key");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 300, -1, -1));

        pub.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pubActionPerformed(evt);
            }
        });
        jPanel3.add(pub, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 340, 170, 30));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Share Public key");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 160, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 466, 490));

        jPanel4.setBackground(new java.awt.Color(0, 153, 204));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("File name");

        name.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Enter Text Message");

        msg.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        msg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel8)
                .addGap(8, 8, 8)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, -1, -1));

        jPanel5.setBackground(new java.awt.Color(0, 153, 204));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        skey.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        skey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skeyActionPerformed(evt);
            }
        });
        jPanel5.add(skey, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 150, -1));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Receive Public Key");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 150, -1));

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Generate Secret Key");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 160, -1));

        newk.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        newk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newkActionPerformed(evt);
            }
        });
        jPanel5.add(newk, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 160, -1));

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Encrypt and Upload");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 50, 150, -1));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 670, 820, 126));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(766, 44, 87, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("FILE SELECTION");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText(" ECDH IMPLEMENTATION");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 630, -1, -1));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("FILE DETAILS");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMouseClicked
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser("./Input/Text");

        if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

            filepath = jfc.getSelectedFile().getAbsolutePath();
            filename = jfc.getSelectedFile().getName();
            name.setText(jfc.getSelectedFile().getName());

        }
//        try {
//
//            int width = 500;
//
//            int height = 500;
//
//            BufferedImage image = null;
//
//            BufferedImage img = ImageIO.read(new java.io.File(filepath));
//
//            System.out.println(img);
//
//            jLabel6.setIcon(new ImageIcon(img));
//        } catch (Exception e) {
//            System.out.println(e);
//        }
    }//GEN-LAST:event_fileMouseClicked

    private void imgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser("./Input/Images");

        if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

            filepath = jfc.getSelectedFile().getAbsolutePath();
            filename = jfc.getSelectedFile().getName();
            name.setText(jfc.getSelectedFile().getName());

        }
//        try {
//
//            int width = 500;
//
//            int height = 500;
//
//            BufferedImage image = null;
//
//            BufferedImage img = ImageIO.read(new java.io.File(filepath));
//
//            System.out.println(img);
//
//            jLabel6.setIcon(new ImageIcon(img));
//        } catch (Exception e) {
//            System.out.println(e);
//        }
    }//GEN-LAST:event_imgActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void inpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        String a = inp.getText(); 

     curve = "secp256r1";

        try {

            try {

                ECNamedCurveParameterSpec aliceCurveSpec = ECNamedCurveTable.getParameterSpec(curve);
                ECParameterSpec aliceSpec = new ECNamedCurveSpec(
                    curve,
                    aliceCurveSpec.getCurve(),
                    aliceCurveSpec.getG(),
                    aliceCurveSpec.getN());

                // Print Alice's parameters
                System.out.println("Alice's parameters:");
                System.out.println("p (prime): " + aliceCurveSpec.getCurve().getField().getCharacteristic().toString());
                System.out.println("a: " + aliceCurveSpec.getCurve().getA().toString());
                System.out.println("b: " + aliceCurveSpec.getCurve().getB().toString());
                System.out.println("G (generator): " + aliceCurveSpec.getG().toString());
                System.out.println("n (order): " + aliceCurveSpec.getN().toString());
                System.out.println("h (cofactor): " + aliceCurveSpec.getH().toString());

                aliceKeyPair = generateKeyPair((a),curve);
                publicKey = aliceKeyPair.getPublic();
                privateKey = aliceKeyPair.getPrivate();
                JOptionPane.showMessageDialog(this, "Key pair is generated!");

                pri.setText(((ECPrivateKey) aliceKeyPair.getPrivate()).getS().toString());
                //            pub.setText(((ECPublicKey) aliceKeyPair.getPublic()).getW().toString());

                byte[] publicKeyBytes = publicKey.getEncoded();

                encodedPublicKey = Base64.getEncoder().encodeToString(publicKeyBytes);

                byte[] privateKeyBytes = privateKey.getEncoded();

                encodedPrivateKey = Base64.getEncoder().encodeToString(privateKeyBytes);

                System.out.println("Alice's Private Key: " + ((ECPrivateKey) aliceKeyPair.getPrivate()).getS());
                ECPoint alicePublicPoint = ((ECPublicKey) aliceKeyPair.getPublic()).getW();
                pub.setText( alicePublicPoint.getAffineX() + ", " + alicePublicPoint.getAffineY());

                System.out.println("Alice's Public Key: (" + alicePublicPoint.getAffineX() + ", " + alicePublicPoint.getAffineY() + ")");

                System.out.println("Alice's Shared Secret: " + Arrays.toString(sharedSecretAlice));

            } catch (NumberFormatException e) {

                JOptionPane.showMessageDialog(this,"Enter valid parameter!");
            }

        } catch (Exception ex) {

            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void priActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priActionPerformed

    private void pubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pubActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
 try {       
             sharedAESKey = generateAESKey();
            
            byte[] encryptedAlicePublicKey = encryptWithAES(publicKey.getEncoded(), sharedAESKey);
      encryptedAlicePublicKeyString = Base64.getEncoder().encodeToString(encryptedAlicePublicKey);
      
       encodedKey = encodeKeyToString(sharedAESKey);

            
        } catch (Exception ex) {
           System.out.println(ex); }
       int did=0 ;   try {
            Class.forName("com.mysql.jdbc.Driver");

            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");

            Statement stmt = (Statement) con.createStatement();
            Statement stmt1 = (Statement) con.createStatement();
            String      doctordetails = (String) jComboBox1.getSelectedItem();
            String[] parts = doctordetails.split(" - ");
            if (parts.length > 0) {
                String idString = parts[0];
                did = Integer.parseInt(idString);

            }

            String sql = "INSERT INTO patient (patientname,pid,imgname,msg,pubKey,priKey,secKey,eKey,status,did) values ('" + Login.userName2 + "','" + Login.uid2 + "','" + filename + "','" + msg.getText() + "','" +  encryptedAlicePublicKeyString + "','" + encodedPrivateKey + "','" +    encodedKey  + "','" + "In progress" + "','" + "In progress" + "','" + did + "')";

            stmt.executeUpdate(sql);
            String maxQuery = "SELECT MAX(id) AS id FROM patient";
            ResultSet rs = stmt.executeQuery(maxQuery);
            if (rs.next()) {
                maxOfid = rs.getInt(1);

            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        JOptionPane.showMessageDialog(this, "Public Key is shared to Doctor!");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void msgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msgActionPerformed

    private void skeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skeyActionPerformed
  public static byte[] decryptWithAES(byte[] encryptedData, SecretKey key) throws Exception {
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.DECRYPT_MODE, key);
        return aesCipher.doFinal(encryptedData);
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
 try {
            // TODO add your handling code here:
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");

            String sql = "SELECT * FROM patient WHERE id=? ";
            PreparedStatement stmt = con.prepareStatement(sql);

            stmt.setInt(1, maxOfid);

            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {

                dpub = rs.getString(12);
                

            }

 } catch (Exception ex) {
            System.out.println(ex);
        }try{
       
               byte[] decryptedBobPublicKeyBytes = decryptWithAES(Base64.getDecoder().decode(dpub), sharedAESKey);
    X509EncodedKeySpec bobPublicKeySpec = new X509EncodedKeySpec(decryptedBobPublicKeyBytes);
     bobPublicKey = KeyFactory.getInstance("EC").generatePublic(bobPublicKeySpec);

         
                ECPoint bobPublicPoint = ((ECPublicKey) bobPublicKey).getW();
                skey.setText(bobPublicPoint.getAffineX() + ", " + bobPublicPoint.getAffineY() );}
catch(Exception e){
    System.out.println(e);
}
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // TODO add your handling code here:
        try{
         

            System.out.println(bobPublicKey);

            KeyAgreement aliceKeyAgreement = KeyAgreement.getInstance("ECDH");
            aliceKeyAgreement.init(privateKey); //  KeyAgreement  her private key (a)
            aliceKeyAgreement.doPhase(bobPublicKey, true); //  computes (a * G) * b
            sharedSecretAlice = aliceKeyAgreement.generateSecret(); // shared secret (sharedECCKey)

            String sharedSecretAliceHex = bytesToHex(sharedSecretAlice);

            System.out.println("Alice's Shared Secret (256-bit key format): " + sharedSecretAliceHex);
            newk.setText(sharedSecretAliceHex);
        }
        catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void newkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newkActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        try {
            encryptImage(filepath , sharedSecretAlice);

            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ECDHH", "root", "");
            java.sql.Statement stmt = con.createStatement();
            ResultSet rs;

            String sql = "UPDATE patient SET eKey = '" + sharedSecretAlice + "' , status='Uploaded' WHERE id = '" + maxOfid + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "Patient record is encrypted using secret key!");
            
        } catch (Exception ex) {

            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed
  public static byte[] encryptWithAES(byte[] data, SecretKey key) throws Exception {
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.ENCRYPT_MODE, key);
        return aesCipher.doFinal(data);
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new Patient().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed
 public static SecretKey generateAESKey() throws Exception {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(256); // AES key size
        return keyGenerator.generateKey();
    }
 public static String encodeKeyToString(SecretKey key) {
        return Base64.getEncoder().encodeToString(key.getEncoded());
    } private static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder(2 * bytes.length);
        for (byte b : bytes) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }
//    private static void encryptImage(String imagePath, byte[] sharedSecret) throws Exception {
//       
//        byte[] imageData = Files.readAllBytes(Paths.get(imagePath));
//
//       
//        for (int i = 0; i < imageData.length; i++) {
//            imageData[i] ^= sharedSecret[i % sharedSecret.length];
//        }
//
//     
//        FileOutputStream fos = new FileOutputStream("./Cloud/Images/"+filename);
//        fos.write(imageData);
//        fos.close();
//    }
    
        public static void encryptImage(String imagePath, byte[] sharedSecret) {
        try {
            byte[] imageData = Files.readAllBytes(Paths.get(imagePath));
            
            byte[] validKey = new byte[256 / 8]; // AES 256-bit key size
            
            if (sharedSecret.length >= validKey.length) {
                System.arraycopy(sharedSecret, 0, validKey, 0, validKey.length);
            } else {
                System.arraycopy(sharedSecret, 0, validKey, 0, sharedSecret.length);
            }
            
            SecretKeySpec aesKey = new SecretKeySpec(validKey, "AES");
            
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, aesKey);
            
            byte[] encryptedData = cipher.doFinal(imageData);
            
            String encryptedImagePath = "C:\\Users\\dines\\Box\\" + Paths.get(imagePath).getFileName();
            FileOutputStream fos = new FileOutputStream(encryptedImagePath);
            fos.write(encryptedData);
            fos.close();
            
            System.out.println("Image encrypted successfully. Encrypted image saved at: " + encryptedImagePath);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }    private static KeyPair generateKeyPair(String privateKeyParameter,String Curve) throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("EC");
        ECGenParameterSpec ecSpec = new ECGenParameterSpec( Curve);
       
        BigInteger privateKey = new BigInteger(privateKeyParameter);
SecureRandom secureRandom = new SecureRandom(privateKey.toByteArray()); // Use the byte representation of the BigInteger

        keyPairGenerator.initialize(ecSpec,secureRandom );
        return keyPairGenerator.generateKeyPair();
    }


      

    public static byte[] encrypt(byte[] input, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(input);
    } public static byte[] decrypt(byte[] input, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, key);
        return cipher.doFinal(input);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Image.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Image.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Image.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Image.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Image().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton file;
    private javax.swing.JRadioButton img;
    private javax.swing.JTextField inp;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField msg;
    private javax.swing.JTextField name;
    private javax.swing.JTextField newk;
    private javax.swing.JTextField pri;
    private javax.swing.JTextField pub;
    private javax.swing.JTextField skey;
    // End of variables declaration//GEN-END:variables
}
